#!/bin/bash

DEBUG="${DEBUG:-off}"
CONFIGDIR="${CONFIGDIR:-/etc/ibaraki}"

quit()
{
    echo -e "$@"
    exit 64
}

# Server part

# Usage: $0 --create FILE USER TMPDIR ARCHIVER ARCHPACK ARCHTEST ARCHARGS ARCHEXT SPECIFY_ARCHIVE_NAME ENABLE_NICE ENABLE_IONICE CHECK_ON_HOST DIRECTORIES
# .gvfs usually can't be opened, so usually it's skipped while tar-ing.
# Also you can exclude any directory (and its subdirectories) from archiving, if you create .nobackup file there.
if [ "$1" == "--create" ]
then
    FILE="${2}"
    USER="${3}"
    TMPDIR="${4}"
    ARCHIVER="${5}"
    ARCHPACK="${6}"
    ARCHTEST="${7}"
    ARCHARGS="${8}"
    ARCHEXT="${9}"
    SPECIFY_ARCHIVE_NAME="${10}"
    ENABLE_NICE="${11}"
    ENABLE_IONICE="${12}"
    CHECK_ON_HOST="${13}"
    shift 13
    echo "--- Determining directory sizes:"
    sudo du --apparent-size --exclude=.gvfs --exclude=.cache/gvfs -chs $@ || quit "Error $? while checking directory sizes."
    echo "--- Creating tar file:"
    [ "$ENABLE_NICE" = "on" ] && NICE="nice -n19" || NICE=""
    [ "$ENABLE_IONICE" = "on" ] && IONICE="ionice -t -c3" || IONICE=""
    sudo $IONICE tar -c --exclude-tag-all=.nobackup --exclude=.gvfs --exclude=.cache/gvfs -f "$TMPDIR/$FILE.tar" $@ # Ignore $?==1, because it's ok while backing something up.
    [ $? -gt 1 ] && quit "Error $? while creating tar file."
    ls -la "$TMPDIR/$FILE.tar" || quit "Error $? while listing tar file."
    echo "--- Packing to $ARCHEXT file:"
    sudo chown "$USER" "$TMPDIR/$FILE.tar" || quit "Error $? while chowning tar file."
    if [ "$SPECIFY_ARCHIVE_NAME" = "on" ]
    then
        $NICE $ARCHIVER $ARCHPACK $ARCHARGS "$TMPDIR/$FILE.tar.$ARCHEXT" "$TMPDIR/$FILE.tar" || quit "Error $? while packing tar file into resulting $ARCHEXT file."
    else
        $NICE $ARCHIVER $ARCHPACK $ARCHARGS "$TMPDIR/$FILE.tar" || quit "Error $? while packing tar file into resulting $ARCHEXT file."
    fi
    sudo rm "$TMPDIR/$FILE.tar" || quit "Error $? while removing tar file."
    if [ "$CHECK_ON_HOST" = "on" ]
    then
        echo "--- Checking integrity of $ARCHEXT file:"
        ls -la "$TMPDIR/$FILE.tar.$ARCHEXT" || quit "Error $? while listing resulting $ARCHEXT file."
        $NICE $ARCHIVER $ARCHTEST $ARCHARGS "$TMPDIR/$FILE.tar.$ARCHEXT" || quit "Error $? while testing resulting $ARCHEXT file."
    fi
    exit 0
fi

# Client part

if [ -f "${CONFIGDIR}/ibaraki.conf" ]
then
    . "${CONFIGDIR}/ibaraki.conf"
    [ -z "$CHECK_ON_HOST" -a "$ENABLE_CHECK" ] && CHECK_ON_HOST="$ENABLE_CHECK"
else
    echo "No config file exist." >&2
    exit 1
fi

# Usage: ssh_run ACKMSG NAKMSG COMMAND
# Sensitive to $DEBUG, $HOST, $BACKUPDIR, $PORT, $USERNAME, $HOSTNAME, $SSHKEY
ssh_run()
{
    ACK="$1"
    NAK="$2"
    shift 2
    [ "$DEBUG" = "on" ] && echo "REMOTE CALL @ $HOST: $@"
    ssh -tt -l "$USERNAME" -i "$SSHKEY" -o LogLevel=QUIET -o PreferredAuthentications=publickey -p "$PORT" "$HOSTNAME" -C "$@" 2>&1
    RV=$?
    [ $RV -eq 0 ] && echo "$ACK" || echo "$NAK"
    return $RV
}

# Usage: scp_from REMOTESRC LOCALDEST
# Sensitive to $DEBUG, $SSHKEY, $BACKUPDIR, $PORT, $USERNAME, $HOST, $HOSTNAME
scp_from()
{
    [ "$DEBUG" = "on" ] && echo "REMOTE COPY: $HOST:$1 -> $2"
    scp -i "$SSHKEY" -P "$PORT" "$USERNAME@$HOSTNAME:$1" "$2" 2>&1
}

# Usage: scp_from LOCALSRC REMOTEDEST
# Sensitive to $DEBUG, $SSHKEY, $BACKUPDIR, $PORT, $USERNAME, $HOST, $HOSTNAME
scp_to()
{
    [ "$DEBUG" = "on" ] && echo "REMOTE COPY: $1 -> $HOST:$2"
    scp -i "$SSHKEY" -P "$PORT" "$1" "$USERNAME@$HOSTNAME:$2" 2>&1
}

if [ -z "$1" ]
then
    for HOST in $HOSTS
    do
        echo " ==== Backing up $HOST." >> "$LOGFILE"
        echo "`date`: Ibaraki has STARTED backing up $HOST." >> "$SHORTLOGFILE"
        if $0 $HOST 2>&1 >> "$LOGFILE"
        then
            echo -n "Going to/from: " >> "$LOGFILE"
            mkdir -p "$BACKUPDIR/$HOST" 2>&1 >> "$LOGFILE"
            pushd "$BACKUPDIR/$HOST" 2>&1 >> "$LOGFILE"
            TAILN="`echo $KEEPFILES + 1 | bc`"
            TOREMOVE="`ls -1t *.tar.* | tail -n+$TAILN`"
            echo "Files to remove: $TOREMOVE" >> "$LOGFILE"
            [ "$TOREMOVE" ] && rm $TOREMOVE 2>&1 >> "$LOGFILE"
            echo -n "Returning to: " >> "$LOGFILE"
            popd 2>&1 >> "$LOGFILE"
            echo " ==== Backed up $HOST." >> "$LOGFILE"
            echo "`date`: Ibaraki got SUCCESS backing up $HOST." >> "$SHORTLOGFILE"
        else
            echo " ==== Unable to back up $HOST!" >> "$LOGFILE"
            echo "`date`: Ibaraki got FAILURE backing up $HOST.    [ !!! ]" >> "$SHORTLOGFILE"
        fi
    done
else
    RV=0
    for HOST in $@
    do
        . "${CONFIGDIR}/host_${HOST}.conf"
        . "${CONFIGDIR}/archiver_${ARCHIVER}.conf" # ARCHIVER is defined in host_$HOST.conf
        FILE="backup-`date +%Y%m%d-%H%M%S`"
        USERNAME="`echo $USER | cut -d: -f1`"

        # Copy original script to remote host
        echo "--- Copying script to remote host:"
        ssh_run "Created $HOST:$TMPDIR." "Can't create $HOST:$TMPDIR." "mkdir -p \"$TMPDIR\"" || quit "\n--- Error communicating $HOST: unable to create working directory!"
        scp_to $0 "$TMPDIR/$REMOTENAME" || quit "\n--- Error communicating $HOST: unable to upload remote side script!"

        SUCCESS="no"
        for ATTEMPT in `seq 1 $ATTEMPTS`
        do
            [ $ATTEMPT -ne 1 ] && echo "TRYING AGAIN (${ATTEMPT}/${ATTEMPTS})"

            # Run --create
            ssh_run "Remote script succeeded." "Remote script failed!" "\"$TMPDIR/$REMOTENAME\" --create \"$FILE\" \"$USER\" \"$TMPDIR\" \"$ARCHIVER\" \"$ARCHPACK\" \"$ARCHTEST\" \"$ARCHARGS\" \"$ARCHEXT\" \"$SPECIFY_ARCHIVE_NAME\" \"$ENABLE_NICE\" \"$ENABLE_IONICE\" \"$CHECK_ON_HOST\" $DIRECTORIES" || continue

            # Determine size and checksum
            echo -e "--- Calculating a checksum:"
            SRC_SIZE="`ssh_run "" "Failure " "stat --printf=%s \"$TMPDIR/$FILE.tar.$ARCHEXT\"" 2>&1 | grep -v 'REMOTE CALL'`"
            SRC_MD5="`ssh_run "" "Failure " "md5sum \"$TMPDIR/$FILE.tar.$ARCHEXT\"" 2>&1 | grep -v 'REMOTE CALL' | cut -d' ' -f1`"
            echo "$HOST:$TMPDIR/$FILE.tar.$ARCHEXT: Size=$SRC_SIZE, MD5=$SRC_MD5."
            FAILED="no"
            echo "$SRC_SIZE" | grep -q 'Failure' && FAILED="yes"
            echo "$SRC_MD5" | grep -q 'Failure' && FAILED="yes"
            [ "$FAILED" = "yes" ] && continue

            # Copy resulting file back
            echo "--- Getting archive from remote host:"
            mkdir -p "$BACKUPDIR/$HOST" 2>&1
            if scp_from "$TMPDIR/$FILE.tar.$ARCHEXT" "$BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT"
            then
                echo "--- Checking received file:"
                ls -la "$BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT" 2>&1
                TGT_SIZE="`stat -c %s "$BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT" 2>&1`"
                if [ "$TGT_SIZE" = "$SRC_SIZE" ]
                then
                    TGT_MD5="`md5sum "$BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT" 2>&1 | cut -d' ' -f1`"
                    if [ "$TGT_MD5" = "$SRC_MD5" ]
                    then
                        [ "$ENABLE_NICE" = "on" ] && NICE="nice -n19" || NICE=""
                        echo "$BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT: Size=$TGT_SIZE, MD5=$TGT_MD5, matched."
                        if [ "$CHECK_BOTH_WAYS" = "on" ]
                        then
                            echo -n "Copying $BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT -> $LOCAL_TMPDIR/$FILE.tar.$ARCHEXT..."
                            mkdir -p "$LOCAL_TMPDIR"
                            cp "$BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT" "$LOCAL_TMPDIR/$FILE.tar.$ARCHEXT" 2>&1 > /dev/null
                            echo -n "Ok, calculating checksum..."
                            TMP_MD5="`md5sum "$LOCAL_TMPDIR/$FILE.tar.$ARCHEXT" 2>&1 | cut -d' ' -f1`"
                            echo "Ok."
                            if [ "$TGT_MD5" = "$TMP_MD5" ]
                            then
                                echo "Testing $LOCAL_TMPDIR/$FILE.tar.$ARCHEXT with $ARCHIVER:"
                                if $NICE $ARCHIVER $ARCHTEST $ARCHARGS "$LOCAL_TMPDIR/$FILE.tar.$ARCHEXT" 2>&1
                                then
                                    SUCCESS="yes"
                                    break
                                else
                                    echo "$ARCHIVER test did not succeed. Warning: this may indicate cache failure!"
                                fi
                            else
                                echo "Copying file to $LOCAL_TMPDIR did not succeed (source: $TGT_MD5, target: $TMP_MD5). Warning: this may indicate storage failure!"
                            fi
                        else
                            echo "Testing $BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT with $ARCHIVER:"
                            if $NICE $ARCHIVER $ARCHTEST $ARCHARGS "$BACKUPDIR/$HOST/$FILE.tar.$ARCHEXT" 2>&1
                            then
                                SUCCESS="yes"
                                break
                            else
                                echo "$ARCHIVER test did not succeed. Warning: this may indicate cache failure!"
                            fi
                        fi
                    else
                        echo "File checksums do not match (source: $SRC_MD5, target: $TGT_MD5). Possibly file was downloaded incorrectly."
                    fi
                else
                    echo "File sizes do not match (source: $SRC_SIZE, target: $TGT_SIZE). Possibly file was downloaded partially."
                fi
            fi
            echo "ERROR: FILE WAS NOT DOWNLOADED CORRECTLY (attempt $ATTEMPT of $ATTEMPTS)"
        done
        [ "$SUCCESS" = "no" ] && echo "GIVING UP"

        echo "--- Cleaning up:"
        # Delete unneeded files and directory from local host
        if [ "$CHECK_BOTH_WAYS" = "on" ]
        then
            [ -f "$LOCAL_TMPDIR/$FILE.tar.$ARCHEXT" ] && rm "$LOCAL_TMPDIR/$FILE.tar.$ARCHEXT" 2>&1 && echo "Deleted $LOCAL_TMPDIR/$FILE.tar.$ARCHEXT." || echo "Can't delete $LOCAL_TMPDIR/$FILE.tar.$ARCHEXT."

            if [ "$REMOVE_EVEN_IF_NON_EMPTY" = "on" ]
            then
                rm -rf "$LOCAL_TMPDIR" 2>&1 && echo "Deleted $LOCAL_TMPDIR." || echo "Can't delete $LOCAL_TMPDIR."
            else
                if [ "$IGNORE_FAIL_ON_NON_EMPTY" = "on" ]
                then
                    rmdir --ignore-fail-on-non-empty "$LOCAL_TMPDIR" 2>&1 && echo "Deleted $LOCAL_TMPDIR (if was empty)." || echo "Can't delete $LOCAL_TMPDIR."
                else
                    rmdir "$LOCAL_TMPDIR" 2>&1 && echo "Deleted $LOCAL_TMPDIR." || echo "Can't delete $LOCAL_TMPDIR, probably artifacts of older backup attempts exist."
                fi
            fi
        fi

        # Delete unneeded files and directory from remote host
        if [ "$DELETE_IF_GIVEN_UP" = "on" -o "$SUCCESS" = "yes" ]
        then
            ssh_run "Deleted $HOST:$TMPDIR/$FILE.tar.$ARCHEXT." "Can't delete $HOST:$TMPDIR/$FILE.tar.$ARCHEXT." "rm \"$TMPDIR/$FILE.tar.$ARCHEXT\""
        else
            echo "Exceeded download attempts, won't delete $HOST:$TMPDIR/$FILE.tar.$ARCHEXT!"
        fi
        ssh_run "Deleted $HOST:$TMPDIR/$REMOTENAME." "Can't delete $HOST:$TMPDIR/$REMOTENAME." "rm \"$TMPDIR/$REMOTENAME\""

        if [ "$REMOVE_EVEN_IF_NON_EMPTY" = "on" ]
        then
            ssh_run "Deleted $HOST:$TMPDIR." "Can't delete $HOST:$TMPDIR." "rm -rf \"$TMPDIR\""
        else
            if [ "$IGNORE_FAIL_ON_NON_EMPTY" = "on" ]
            then
                ssh_run "Deleted $HOST:$TMPDIR (if was empty)." "Can't delete $HOST:$TMPDIR." "rmdir --ignore-fail-on-non-empty \"$TMPDIR\""
            else
                ssh_run "Deleted $HOST:$TMPDIR." "Can't delete $HOST:$TMPDIR, probably artifacts of older backup attempts exist." "rmdir \"$TMPDIR\""
            fi
        fi

        [ "$SUCCESS" = "no" ] && RV=`echo $RV + 1 | bc`
    done
    exit $RV
fi
